#!/bin/bash
#
#
# tov.sh - Executes the TOV solver for a batch of central
#					densities, found in the EoS file.
#
# Author: 	Rodrigo Alvares de Souza
# 			rsouza01@gmail.com
#
#
# History:
# Version 0.4: 2014/04/05 (rsouza) - improving legibility, 
#									adding coments, etc.
#
# DO NOT EDIT THIS FILE. 
# MODEL RELATED PARAMETERS SHOULD BE ENTERED IN FILE 'tov_parameters.sh'

#Command line arguments
case $1 in

-V | --version)
	echo -n $(basename "$0")
	grep '^# Version ' "$0" | tail -1 | cut -d : -f 1 | tr -d \#
	exit 0
	;;
	
esac

echo " "
echo " "
echo '#******************************************************'
echo '#***********   TOV Solver Shell Script  ***************'
echo '#******************************************************'
echo " "

if [ ! -f tov_parameters.sh ]
then
	echo " "
	echo "#Parameters file 'tov_parameters.sh' not found."
	echo "#Create the file and run this script again."
	echo " "
	exit -1
fi


source tov_parameters.sh

# Replaces the INTERNAL FIELD SEPARATOR, but storing a copy first
OLD_IFS=$IFS
IFS=', '

echo "#EoS file: '${_EOS_FILE_NAME}''."
echo "#Batch config file: '${_CONFIG_FILE}'."
echo "#Output folder: '${_OUTPUT_DIR}'."
echo " "

# Does the EoS file exist?

if [ ! -f $_EOS_FILE_NAME ]
then
	echo "#EoS file '${_EOS_FILE_NAME}' not found."
	echo " "
	exit -1
fi

# Does the output dir exist?
if [ ! -d "$_OUTPUT_DIR" ]; then
	echo "#Folder '${_OUTPUT_DIR}' not found, creating..."
	mkdir $_OUTPUT_DIR
	echo " "
fi


echo '#******************************************************'

declare -i secondsProcessing=0

cat $_EOS_FILE_NAME | while read line; do 
	arr=($line)
	_rho_0=${arr[0]}

	#Ignores lines beginning with '#'
	if [[ $_rho_0 != '#'* ]];  
	then
		echo "Processing rho_0=${_rho_0}..."

		#beginProcessing=`date +%s`
		beginProcessing=`date +%s%N | cut -b1-13`

		commandLine="${_EXECUTAVEL} -rho_0=${_rho_0} -config=${_CONFIG_FILE} > ${_OUTPUT_DIR}out_${_rho_0}.txt"
		echo $commandLine
		eval $commandLine
		
		#endProcessing=`date +%s`
		endProcessing=`date +%s%N | cut -b1-13`

		secondsProcessing=endProcessing-beginProcessing

		echo "Processing time: $secondsProcessing ms."

		#Return code == 0 ? 'GREAT SUCCESS!!' : 'NAUGHTY, NAUGHTY!'
		if [ $? -ne 0 ]; then
			echo "ERROR!"
		else
			echo "OK!"
		fi


		echo "__________________________________________________________________________________________________________"
	fi

done

#Restoring the INTERNAL FIELD SEPARATOR
IFS=$OLD_IFS

echo "Done."
