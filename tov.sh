#!/bin/bash
#
#
# tov.sh - Executes the TOV solver for a batch of central
#               densities, found in the EoS file.
#
# Author: 	Rodrigo Alvares de Souza
# 		rsouza01@gmail.com
#
#
# History:
# Version 0.4: 2014/04/05 (rsouza) - improving legibility, adding coments, etc.
# Version 0.5: 2014/04/14 (rsouza) - update regarding the tov_parameters.sh
#
# DO NOT EDIT THIS FILE. 
# MODEL RELATED PARAMETERS SHOULD BE ENTERED VIA COMMAND LINE PARAMETERS.

# IN PRINCIPLE, THESE PARAMETERS DO NOT NEED TO BE CHANGED.

_CONFIG_FILE="./tov_solver.conf"
_OUTPUT_DIR="./output/"
_EXECUTABLE="./bin/Debug/FORTRAN_TOV_Solver"

USE_MESSAGE="
Usage: $(basename "$0") [OPTIONS]

OPTIONS:
  -c, --config          TOV Solver config file, '${_CONFIG_FILE}' by default.
  -o, --outputdir       Output directory, '${_OUTPUT_DIR}' by default.
  -e, --executable      TOV Solver executable, '${_EXECUTABLE}' by default.

  -h, --help            Show this help screen and exits
  -V, --version         Show program version and exits
"


#Command line arguments
while test -n "$1"
do
        case "$1" in

		-c | --config) 
                        shift
                        _CONFIG_FILE=$1 
                ;;

		-o | --outputdir) 
                        shift
                        _OUTPUT_DIR=$1 
                ;;

		-e | --executable) 
                        shift
                        _EXECUTABLE=$1 
                ;;

		-h | --help)
			echo "$USE_MESSAGE"
			exit 0
		;;

		-V | --version)
			echo -n $(basename "$0")
			grep '^# Version ' "$0" | tail -1 | cut -d : -f 1 | tr -d \#
			exit 0
		;;

		*)
			echo Invalid option: $1
			exit 1
		;;
	esac

	shift
done


#Lets find out which EoS file we should use...
while read LINE; do
        #Ignoring comments...
        [ "$(echo $LINE | cut -c1)" = '#' ] && continue

        #Ignoring white lines...
        [ "$LINE" ] || continue

        #Splits the config file line
        arrIN=(${LINE//=/ })

        key=$(echo ${arrIN[0]} |tr A-Z a-z)
        value=${arrIN[1]}

        case "$key" in
        eos_file_name)
                _EOS_FILE_NAME=$value
                ;;
        esac

done < "${_CONFIG_FILE}"



echo " "
echo " "
echo "__________________________________________________________________________________________________________"
echo " "
echo '---------------------------------------   TOV Solver Shell Script  ---------------------------------------'
echo " "
echo "__________________________________________________________________________________________________________"

# Replaces the INTERNAL FIELD SEPARATOR, but storing a copy first
OLD_IFS=$IFS
IFS=', '

echo "EoS file: '${_EOS_FILE_NAME}''."
echo "Batch config file: '${_CONFIG_FILE}'."
echo "Output folder: '${_OUTPUT_DIR}'."
echo "__________________________________________________________________________________________________________"


# Does the EoS file exist?

if [ ! -f $_EOS_FILE_NAME ]
then
	echo "EoS file '${_EOS_FILE_NAME}' not found."
	echo " "
	exit -1
fi

# Does the output dir exist?
if [ ! -d "$_OUTPUT_DIR" ]; then
	echo "Folder '${_OUTPUT_DIR}' not found, creating..."
	mkdir $_OUTPUT_DIR
	echo " "
fi

echo "__________________________________________________________________________________________________________"

declare -i secondsProcessing=0

cat $_EOS_FILE_NAME | while read line; do 
	arr=($line)
	_rho_0=${arr[0]}

	#Ignores lines beginning with '#'
	if [[ $_rho_0 != '#'* ]];  
	then
		echo "Processing rho_0=${_rho_0}..."

		beginProcessing=`date +%s%N | cut -b1-13`

		commandLine="${_EXECUTABLE} -rho_0=${_rho_0} -config=${_CONFIG_FILE} > ${_OUTPUT_DIR}out_${_rho_0}.txt"
		echo $commandLine
		eval $commandLine

		endProcessing=`date +%s%N | cut -b1-13`

		secondsProcessing=endProcessing-beginProcessing

		echo "Processing time: $secondsProcessing ms."

		#Return code == 0 ? 'GREAT SUCCESS!!' : 'NAUGHTY, NAUGHTY!'
		if [ $? -ne 0 ]; then
			echo "ERROR!"
		else
			echo "OK!"
		fi


		echo "__________________________________________________________________________________________________________"
	fi

done

#Restoring the INTERNAL FIELD SEPARATOR
IFS=$OLD_IFS

echo "Done."
